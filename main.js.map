{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/utils.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/scripts/index.js","webpack://mesto-project-ff/./src/components/card.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// функция открытия попапа\r\nexport function openPopup(popup) {\r\n  document.addEventListener(\"keydown\", closePopupEsc);\r\n  popup.classList.add(\"popup_is-opened\");\r\n}\r\n\r\n// функция закрытия попапа\r\nexport function closePopup(popup) {\r\n  document.removeEventListener(\"keydown\", closePopupEsc);\r\n  popup.classList.remove(\"popup_is-opened\");\r\n}\r\n\r\n// функция закрытия попапа нажатием на оверлей\r\nexport function closePopupOverlay(event) {\r\n      if (event.target === event.currentTarget) {\r\n        closePopup(event.currentTarget);\r\n      }\r\n    };\r\n\r\n// функция закрытия попапа нажатием на Esc\r\nexport function closePopupEsc(event) {\r\n  if (event.key === \"Escape\") {\r\n    const popupOpened = document.querySelector(\".popup_is-opened\");\r\n    closePopup(popupOpened);\r\n  }\r\n}","import { closePopup } from \"./modal.js\";\r\n\r\nexport function checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  } else {\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n}\r\n\r\n// универсальная функция управления текстом кнопки\r\nexport function renderLoading(\r\n  isLoading,\r\n  button,\r\n  buttonText = \"Сохранить\",\r\n  loadingText = \"Сохранение...\"\r\n) {\r\n  if (isLoading) {\r\n    button.textContent = loadingText;\r\n  } else {\r\n    button.textContent = buttonText;\r\n  }\r\n}\r\n\r\n// универсальная функция, которая принимает функцию запроса, объект события и текст во время загрузки\r\nexport function handleSubmit(request, evt, loadingText = \"Сохранение...\") {\r\n  // всегда нужно предотвращать перезагрузку формы при сабмите\r\n  evt.preventDefault();\r\n  //находим ближайший к форме попап\r\n  const popup = evt.target.closest(\".popup_is-opened\");\r\n  // универсально получаем кнопку сабмита из `evt`\r\n  const submitButton = evt.submitter;\r\n  // записываем начальный текст кнопки до вызова запроса\r\n  const initialText = submitButton.textContent;\r\n  // изменяем текст кнопки до вызова запроса\r\n  renderLoading(true, submitButton, initialText, loadingText);\r\n  return (\r\n    request()\r\n      .then(() => {\r\n        // любую форму нужно очищать после успешного ответа от сервера\r\n        // а также `reset` может запустить деактивацию кнопки сабмита (смотрите в `validate.js`)\r\n        evt.target.reset();\r\n        closePopup(popup) //закрываем попап после успешного ответа (я думал нельзя в utils что либо импортировать,\r\n        // чтобы не было жесткой связки)\r\n      })\r\n      .catch((err) => {\r\n        // в каждом запросе нужно ловить ошибку\r\n        console.error(`Ошибка: ${err}`);\r\n      })\r\n      // в каждом запросе в `finally` нужно возвращать обратно начальный текст кнопки\r\n      .finally(() => {\r\n        renderLoading(false, submitButton, initialText);\r\n      })\r\n  );\r\n}\r\n","import { checkResponse } from \"./utils.js\";\r\n\r\nexport const config = {\r\n  baseUrl: \"https://mesto.nomoreparties.co/v1/wff-cohort-21\",\r\n  headers: {\r\n    authorization: \"adfb87df-3032-40f6-8edf-de055a5b3295\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n// Универсальная функция запроса с проверкой ответа\r\nexport const request = (endpoint, options = {}) => {\r\n  // базовый URL и конечный\r\n  const url = `${config.baseUrl}${endpoint}`;\r\n\r\n  const headers = {\r\n    ...config.headers,\r\n    ...options.headers,\r\n  };\r\n\r\n  // Выполняем запрос и проверяем ответ\r\n  return fetch(url, {\r\n    ...options,\r\n    headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n//запрос на сервер для получения обьекта с первоначальными данными пользователя\r\nexport const getInitialUser = () => {\r\n  return request(\"/users/me\").then((result) => {\r\n    console.log(result);\r\n    return result;\r\n  });\r\n};\r\n\r\n//запрос на сервер для получения массива обьектов с данными карточек других пользователей\r\nexport const getCardsDescription = () => {\r\n  return request(\"/cards\").then((result) => {\r\n    console.log(result);\r\n    return result;\r\n  });\r\n};\r\n\r\n// Функция для обновления профиля на сервере\r\nexport const renameUserData = (name, about) => {\r\n  return request(\"/users/me\", {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  }).then((data) => {\r\n    console.log(\"Профиль обновлен:\", data);\r\n    return data;\r\n  });\r\n};\r\n\r\n//запрос на сервер для удаления карточки\r\nexport const deleteCard = (cardId) => {\r\n  return request(`/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n};\r\n\r\n//запрос на сервер для установки лайка\r\nexport const addLikeCard = (cardId) => {\r\n  return request(`/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n  });\r\n};\r\n\r\n//запрос на сервер для удаления лайка\r\nexport const delLikeCard = (cardId) => {\r\n  return request(`/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n};\r\n\r\n//запрос на сервер с данными нового аватара\r\nexport const changeAvatar = (avatar) => {\r\n  return request(\"/users/me/avatar\", {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify({\r\n      avatar: avatar,\r\n    }),\r\n  });\r\n};\r\n\r\n// //запрос на сервер для создания новой карточки\r\nexport const createNewCard = (cardTitle, cardImg) => {\r\n  return request(\"/cards\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      name: cardTitle,\r\n      link: cardImg,\r\n    }),\r\n  });\r\n};\r\n\r\n//функция проверки действительности и URL изображения\r\nexport const checkImageUrl = (url) => {\r\n  return fetch(url, { method: \"HEAD\" })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        return Promise.reject(`Ошибка: ${response.status}`);\r\n      }\r\n      // Проверка на url\r\n      const contentType = response.headers.get(\"Content-Type\");\r\n      if (contentType && contentType.startsWith(\"image/\")) {\r\n        return true;\r\n      } else {\r\n        return Promise.reject(\"Ошибка: Это не url\");\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error:\", error);\r\n      return false;\r\n    });\r\n};\r\n","export const validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_submit_inactive\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__input-error_active\",\r\n};\r\n\r\nconst showInputError = (formElement, inputElement, errorMessage) => {\r\n  // Находим элемент ошибки внутри самой функции\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\nconst hideInputError = (formElement, inputElement) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Функция принимает массив полей\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  // проходим по этому массиву методом some\r\n  return inputList.some((inputElement) => {\r\n    // Если поле не валидно, колбэк вернёт true\r\n    // Обход массива прекратится и вся функция\r\n    // hasInvalidInput вернёт true\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\n// Функция isValid теперь принимает formElement и inputElement,\r\n// а не берёт их из внешней области видимости\r\n\r\nconst isValid = (formElement, inputElement) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    // встроенный метод setCustomValidity принимает на вход строку\r\n    // и заменяет ею стандартное сообщение об ошибке\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    // если передать пустую строку, то будут доступны\r\n    // стандартные браузерные сообщения\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    // теперь, если ошибка вызвана регулярным выражением,\r\n    // переменная validationMessage хранит наше кастомное сообщение\r\n    showInputError(formElement, inputElement, inputElement.validationMessage);\r\n  } else {\r\n    hideInputError(formElement, inputElement);\r\n  }\r\n};\r\n\r\n// Функция для деактивации кнопки\r\nexport const disableButton = (buttonElement) => {\r\n  buttonElement.disabled = true;\r\n  buttonElement.classList.add(validationConfig.inactiveButtonClass); // добавляем класс для стилизации неактивной кнопки\r\n};\r\n\r\n// Функция для активации кнопки\r\nconst enableButton = (buttonElement) => {\r\n  buttonElement.disabled = false;\r\n  buttonElement.classList.remove(validationConfig.inactiveButtonClass); // Убираем класс неактивной кнопки\r\n};\r\n\r\n// Функция принимает массив полей ввода\r\n// и элемент кнопки, состояние которой нужно менять\r\n\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  // Если есть хотя бы один невалидный инпут\r\n  if (hasInvalidInput(inputList)) {\r\n    // сделай кнопку неактивной\r\n    disableButton(buttonElement);\r\n  } else {\r\n    // иначе сделай кнопку активной\r\n    enableButton(buttonElement);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  // Находим все поля внутри формы,\r\n  // сделаем из них массив методом Array.from\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n  toggleButtonState(inputList, buttonElement);\r\n\r\n  // Добавляем обработчик события 'reset', который деактивирует кнопку\r\n  formElement.addEventListener(\"reset\", () => {\r\n    disableButton(buttonElement);\r\n  });\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((inputElement) => {\r\n    // каждому полю добавим обработчик события input\r\n    inputElement.addEventListener(\"input\", () => {\r\n      // Внутри колбэка вызовем isValid,\r\n      // передав ей форму и проверяемый элемент\r\n      isValid(formElement, inputElement);\r\n      // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  // Найдём все формы с указанным классом в DOM,\r\n  // сделаем из них массив методом Array.from\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n  // Переберём полученную коллекцию\r\n  formList.forEach((formElement) => {\r\n    // Для каждой формы вызовем функцию setEventListeners,\r\n    // передав ей элемент формы\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n// Функция clearValidation, которая очищает\r\n// ошибки валидации формы и делает кнопку отправки формы неактивной\r\n\r\n// Пройтись по всем элементам формы и удалить текст ошибок валидации\r\n// Убрать класс ошибок у соответствующих полей\r\n// Деактивировать кнопку отправки формы\r\n\r\nexport function clearValidation(formElement, validationConfig) {\r\n  // Удаляем текст ошибок валидации и классы ошибок у полей ввода\r\n  const inputElements = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  inputElements.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement);\r\n  });\r\n\r\n  // Деактивируем кнопку отправки формы\r\n  const submitButton = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  toggleButtonState(inputElements, submitButton);\r\n}\r\n","import { createCard } from \"../components/card.js\";\r\n\r\nimport { handleSubmit } from \"../components/utils.js\";\r\n\r\nimport {\r\n  getInitialUser,\r\n  getCardsDescription,\r\n  renameUserData,\r\n  deleteCard,\r\n  addLikeCard,\r\n  delLikeCard,\r\n  changeAvatar,\r\n  checkImageUrl,\r\n  createNewCard,\r\n} from \"../components/api.js\";\r\n\r\nimport {\r\n  validationConfig,\r\n  enableValidation,\r\n  clearValidation,\r\n  disableButton,\r\n} from \"../components/validation.js\";\r\n\r\nimport {\r\n  openPopup,\r\n  closePopup,\r\n  closePopupOverlay,\r\n} from \"../components/modal.js\";\r\n\r\nlet currentCardElement = null; // Переменная для хранения текущей карточки\r\n\r\nconst popupEditButtonOpen = document.querySelector(\".profile__edit-button\");\r\nconst popupNewCardButtonOpen = document.querySelector(\".profile__add-button\");\r\n\r\nconst popupEdit = document.querySelector(\".popup_type_edit\");\r\nconst popupAvatarUpdate = document.querySelector(\".popup_type_update-avatar\");\r\nconst popupDelCardQuestion = document.querySelector(\".popup_type_question\");\r\nconst popupNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst popupZoom = document.querySelector(\".popup_type_image\");\r\n\r\nconst updateAvatarForm = document.querySelector(\r\n  \".popup__form_type_update-avatar\"\r\n);\r\n\r\nconst popupZoomImg = document.querySelector(\".popup__image\");\r\nconst popupZoomTitle = document.querySelector(\".popup__caption\");\r\n\r\nconst popupInputNewCardTitle = document.querySelector(\r\n  \".popup__input_type_card-name\"\r\n);\r\nconst popupInputNewCardImg = document.querySelector(\".popup__input_type_url\");\r\n\r\nconst profileAvatarImg = document.querySelector(\".profile__image\");\r\nconst profileInfoTitle = document.querySelector(\".profile__title\");\r\nconst profileInfoDescription = document.querySelector(\".profile__description\");\r\n\r\n// Находим форму в DOM(любую, не обязательно profileForm (форма профиля))\r\nconst profileForm = document.forms.profileEdit;\r\nconst formCreateNC = document.forms.newplace;\r\n\r\n// Находим поля формы в DOM\r\nconst nameInput = profileForm.querySelector(\".popup__input_type_name\");\r\nconst jobInput = profileForm.querySelector(\".popup__input_type_description\");\r\n\r\nconst avatarInput = document.querySelector(\".popup__input_type_update-avatar\");\r\n\r\n// @todo: DOM узлы\r\n\r\nconst cardsContainer = document.querySelector(\".places__list\");\r\n\r\n// @todo: Вывести карточки на страницу\r\n\r\n// Функция добавления карточки на страницу\r\nfunction addCards(cardsDataArray, currentUserId, method = \"prepend\") {\r\n  cardsDataArray.forEach((cardData) => {\r\n    const card = createCard({\r\n      img: cardData.link,\r\n      title: cardData.name,\r\n      functionDelCard: handleOpenDeletePopup,\r\n      handleLikeCard: handleLikeCard,\r\n      handlerOpenPopupZoom: handleOpenPopupZoom,\r\n      cardData: cardData,\r\n      currentUserId: currentUserId,\r\n    });\r\n    cardsContainer[method](card);\r\n  });\r\n}\r\n\r\n//функция открытия попапа просмотра фото\r\nfunction openPopupZoom(imageSrc, titleText) {\r\n  popupZoomImg.src = imageSrc;\r\n  popupZoomImg.alt = titleText;\r\n  popupZoomTitle.textContent = titleText;\r\n\r\n  openPopup(popupZoom);\r\n}\r\n\r\n//Обработчик открытия попапа увеличения фото\r\nfunction handleOpenPopupZoom(event) {\r\n  const cardImg = event.target;\r\n\r\n  const card = cardImg.closest(\".card\");\r\n  const cardTitle = card.querySelector(\".card__title\").textContent;\r\n\r\n  openPopupZoom(cardImg.src, cardTitle);\r\n}\r\n\r\n// добавления слушателей и функции закрытия нажатием на крестик\r\nfunction addListenersClosePopup() {\r\n  const popupList = document.querySelectorAll(\".popup\");\r\n  const popupBtnCloseList = document.querySelectorAll(\".popup__close\");\r\n\r\n  popupBtnCloseList.forEach((popupBtn, index) => {\r\n    popupBtn.addEventListener(\"click\", () => {\r\n      closePopup(popupList[index]);\r\n    });\r\n  });\r\n}\r\n\r\n// добавления слушателей и функции закрытия попапа нажатием на оверлей\r\nfunction addListenersClosePopupOverlay() {\r\n  const popupList = Array.from(document.querySelectorAll(\".popup\"));\r\n\r\n  popupList.forEach((popupItem) => {\r\n    popupItem.addEventListener(\"mousedown\", closePopupOverlay);\r\n  });\r\n}\r\n\r\n//функция открытия попапа редактирования\r\nfunction openPopupEdit() {\r\n  const buttonElement = popupEdit.querySelector(\".popup__button\");\r\n\r\n  disableButton(buttonElement);\r\n\r\n  nameInput.value = profileInfoTitle.textContent;\r\n  jobInput.value = profileInfoDescription.textContent;\r\n\r\n  clearValidation(profileForm, validationConfig);\r\n  openPopup(popupEdit);\r\n}\r\n\r\n//функция открытия попапа создания новой карточки\r\nfunction openPopupNewCard() {\r\n  popupInputNewCardImg.value = \"\";\r\n  popupInputNewCardTitle.value = \"\";\r\n  clearValidation(formCreateNC, validationConfig);\r\n  openPopup(popupNewCard);\r\n}\r\n\r\n// Функция для обновления информации профиля\r\nfunction updateProfileInfo(name, about, avatar) {\r\n  profileInfoTitle.textContent = name;\r\n  profileInfoDescription.textContent = about;\r\n  profileAvatarImg.style.backgroundImage = `url('${avatar}')`;\r\n}\r\n\r\nPromise.all([getInitialUser(), getCardsDescription()])\r\n  .then(([dataUser, dataCards]) => {\r\n    const currentUserId = dataUser._id; //мой id\r\n\r\n    // Обновляем информацию о пользователе\r\n    updateProfileInfo(dataUser.name, dataUser.about, dataUser.avatar);\r\n    addCards(dataCards, currentUserId, \"append\");\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\n// Обработчик изменения данных профиля и отправки формы\r\nfunction handleEditFormSubmit(evt) {\r\n  // Функция, которая возвращает промис\r\n  function makeRequest() {\r\n    const name = nameInput.value;\r\n    const about = jobInput.value;\r\n\r\n    return renameUserData(name, about).then((userData) => {\r\n      // Обновляем DOM с новыми данными профиля\r\n      profileInfoTitle.textContent = userData.name;\r\n      profileInfoDescription.textContent = userData.about;\r\n    });\r\n  }\r\n  // Вызываем универсальную функцию handleSubmit\r\n  handleSubmit(makeRequest, evt);\r\n}\r\n\r\n//Обработчик создания новой карточки\r\nfunction handleCreateNewCardSubmit(evt) {\r\n  function makeRequest() {\r\n    // Получаем значения полей\r\n    const cardImg = popupInputNewCardImg.value;\r\n    const cardTitle = popupInputNewCardTitle.value;\r\n\r\n    // Отправляем запрос на создание новой карточки\r\n    return createNewCard(cardTitle, cardImg).then((newCardData) => {\r\n      // Передаем данные новой карточки в функцию addCards\r\n      addCards([newCardData], newCardData.owner._id, 'prepend');\r\n    });\r\n  }\r\n  // Вызываем универсальную функцию\r\n  handleSubmit(makeRequest, evt);\r\n}\r\n\r\n//функция обработчик открытия попапа подтверждения удаления\r\nfunction handleOpenDeletePopup(cardElement, cardId) {\r\n  currentCardElement = { element: cardElement, id: cardId };\r\n  openPopup(popupDelCardQuestion); // Открываем попап подтверждения\r\n}\r\n\r\n//функция обработчик удаления карточки\r\nfunction handleDeleteCardSubmit(evt) {\r\n  evt.preventDefault(); // Предотвращаем стандартную отправку формы\r\n\r\n  if (currentCardElement) {\r\n    deleteCard(currentCardElement.id)\r\n      .then(() => {\r\n        currentCardElement.element.remove(); // Удаляем карточку из DOM\r\n        closePopup(popupDelCardQuestion); // Закрываем попап после успешного удаления\r\n      })\r\n      .catch((err) => {\r\n        console.error(`Ошибка при удалении карточки: ${err}`);\r\n      });\r\n  }\r\n}\r\n\r\n//функция обработчик установки/удаления лайка\r\nfunction handleLikeCard(cardElement, cardId, isLiked) {\r\n  const likeButton = cardElement.querySelector(\".card__like-button\");\r\n  const likeCounter = cardElement.querySelector(\".card__like-number\");\r\n\r\n  if (isLiked) {\r\n    delLikeCard(cardId)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.remove(\"card__like-button_is-active\");\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.error(`Ошибка при удалении лайка: ${err}`);\r\n      });\r\n  } else {\r\n    addLikeCard(cardId)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.add(\"card__like-button_is-active\");\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.error(`Ошибка при добавлении лайка: ${err}`);\r\n      });\r\n  }\r\n}\r\n\r\n//функция обработчик смены аватара\r\nfunction handleAvatarChange(evt) {\r\n  function makeRequest() {\r\n    const avatarInputValue = avatarInput.value;\r\n\r\n    // Проверяем URL перед обновлением аватара\r\n    return checkImageUrl(avatarInputValue).then((isValid) => {\r\n      if (isValid) {\r\n        return changeAvatar(avatarInputValue).then((updatedData) => {\r\n          profileAvatarImg.style.backgroundImage = `url('${updatedData.avatar}')`;\r\n        });\r\n      } else {\r\n        console.error(\"Указанный URL-адрес не является допустимым.\");\r\n      }\r\n    });\r\n  }\r\n  // Вызываем универсальную функцию handleSubmit\r\n  handleSubmit(makeRequest, evt);\r\n}\r\n\r\n//слушатель открытия попапа редактирования\r\npopupEditButtonOpen.addEventListener(\"click\", openPopupEdit);\r\n\r\n//слушатель открытия попапа смены аватара\r\nprofileAvatarImg.addEventListener(\"click\", () => openPopup(popupAvatarUpdate));\r\n\r\n//слушатель открытия попапа создания новой карточки\r\npopupNewCardButtonOpen.addEventListener(\"click\", openPopupNewCard);\r\n\r\n//слушатель создания новой карточки\r\nformCreateNC.addEventListener(\"submit\", handleCreateNewCardSubmit);\r\n\r\n// Прикрепляем обработчик к форме:\r\n// он будет следить за событием “submit” - «отправка»\r\nprofileForm.addEventListener(\"submit\", handleEditFormSubmit);\r\n\r\n//добавление слушателей закрытия попапа нажатием на крестик\r\naddListenersClosePopup();\r\n\r\n//вызов функции закрытия попапа нажатием на оверлей\r\naddListenersClosePopupOverlay();\r\n\r\n// Вызовем функцию включение валидации вызовом enableValidation\r\n// все настройки передаются при вызове\r\nenableValidation(validationConfig);\r\n\r\n// Слушатель на подтверждение удаления карточки\r\npopupDelCardQuestion.addEventListener(\"submit\", handleDeleteCardSubmit);\r\n\r\nupdateAvatarForm.addEventListener(\"submit\", handleAvatarChange);\r\n","// @todo: Функция создания карточки\r\n\r\nexport function createCard({\r\n  img,\r\n  title,\r\n  functionDelCard,\r\n  handleLikeCard,\r\n  handlerOpenPopupZoom,\r\n  cardData,\r\n  currentUserId,\r\n}) {\r\n  const cardTemplate = document.querySelector(\"#card-template\").content;\r\n  const cardElement = cardTemplate.querySelector(\".card\").cloneNode(true);\r\n  const buttonDelCard = cardElement.querySelector(\".card__delete-button\");\r\n  const buttonLikeCard = cardElement.querySelector(\".card__like-button\");\r\n  const cardImg = cardElement.querySelector(\".card__image\");\r\n  const cardTitle = cardElement.querySelector(\".card__title\");\r\n  const likeCounter = cardElement.querySelector(\".card__like-number\");\r\n\r\n  cardImg.src = img;\r\n  cardImg.alt = title;\r\n  cardTitle.textContent = title;\r\n\r\n  //подгружаем кол-во лайков с сервера\r\n  likeCounter.textContent = cardData.likes.length;\r\n\r\n  //проверяем есть ли наши лайки, если есть то красим сердце в черный\r\n  if (cardData.likes.some((like) => like._id === currentUserId)) {\r\n    buttonLikeCard.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  // проверка на владельца карточки\r\n  if (cardData.owner._id !== currentUserId) {\r\n    buttonDelCard.remove(); // Удаляем кнопку, если карточка создана не нами\r\n  } else {\r\n    // Вешаем событие только на свои карточки\r\n    buttonDelCard.addEventListener(\"click\", () =>\r\n      functionDelCard(cardElement, cardData._id)\r\n    );\r\n  }\r\n\r\n  buttonLikeCard.addEventListener(\"click\", () => {\r\n    const isLiked = buttonLikeCard.classList.contains(\r\n      \"card__like-button_is-active\"\r\n    );\r\n    handleLikeCard(cardElement, cardData._id, isLiked);\r\n  });\r\n  cardImg.addEventListener(\"click\", handlerOpenPopupZoom);\r\n\r\n  return cardElement;\r\n}\r\n\r\n// @todo: Функция удаления карточки\r\n\r\n// export function delCard(evt) {\r\n//   evt.target.closest(\".card\").remove();\r\n// }\r\n\r\n//лайк карточки\r\n// export function likeCard(evt) {\r\n//   if (evt.target.classList.contains(\"card__like-button\")) {\r\n//     evt.target.classList.toggle(\"card__like-button_is-active\");\r\n//   }\r\n// }\r\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","openPopup","popup","document","addEventListener","closePopupEsc","classList","add","closePopup","removeEventListener","remove","closePopupOverlay","event","target","currentTarget","key","querySelector","checkResponse","res","ok","json","Promise","reject","concat","status","renderLoading","isLoading","button","buttonText","arguments","length","loadingText","textContent","handleSubmit","request","evt","preventDefault","closest","submitButton","submitter","initialText","then","reset","catch","err","console","error","finally","config","authorization","endpoint","options","url","headers","_objectSpread","fetch","addLikeCard","cardId","method","delLikeCard","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","hideInputError","formElement","inputElement","errorElement","id","isValid","validity","patternMismatch","setCustomValidity","dataset","errorMessage","valid","showInputError","validationMessage","disableButton","buttonElement","disabled","toggleButtonState","inputList","some","hasInvalidInput","enableButton","clearValidation","inputElements","Array","from","querySelectorAll","forEach","popupList","currentCardElement","popupEditButtonOpen","popupNewCardButtonOpen","popupEdit","popupAvatarUpdate","popupDelCardQuestion","popupNewCard","popupZoom","updateAvatarForm","popupZoomImg","popupZoomTitle","popupInputNewCardTitle","popupInputNewCardImg","profileAvatarImg","profileInfoTitle","profileInfoDescription","profileForm","forms","profileEdit","formCreateNC","newplace","nameInput","jobInput","avatarInput","cardsContainer","addCards","cardsDataArray","currentUserId","cardData","card","_ref","img","title","functionDelCard","handleLikeCard","handlerOpenPopupZoom","cardElement","content","cloneNode","buttonDelCard","buttonLikeCard","cardImg","cardTitle","likeCounter","src","alt","likes","like","_id","owner","isLiked","contains","createCard","link","name","handleOpenDeletePopup","handleOpenPopupZoom","imageSrc","titleText","element","likeButton","updatedCard","all","result","log","about","avatar","_ref2","dataUser","dataCards","style","backgroundImage","value","body","JSON","stringify","createNewCard","newCardData","data","userData","popupBtn","index","popupItem","setEventListeners","enableValidation","avatarInputValue","response","contentType","get","startsWith","updatedData"],"sourceRoot":""}