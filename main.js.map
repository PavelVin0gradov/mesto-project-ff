{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/scripts/index.js","webpack://mesto-project-ff/./src/scripts/cards.js"],"sourcesContent":["// @todo: Функция создания карточки\r\n\r\nexport function createCard(img, title, functionDelCard, functionLikeCard, handlerOpenPopupZoom) {\r\n  const cardTemplate = document.querySelector(\"#card-template\").content;\r\n  const cardsContainer = document.querySelector(\".places__list\");\r\n  const cardElement = cardTemplate.querySelector(\".card\").cloneNode(true);\r\n  const buttonDelCard = cardElement.querySelector(\".card__delete-button\");\r\n  const cardImg = cardElement.querySelector(\".card__image\");\r\n  const cardTitle = cardElement.querySelector(\".card__title\");\r\n\r\n  cardImg.src = img;\r\n  cardImg.alt = title;\r\n  cardTitle.textContent = title;\r\n\r\n  buttonDelCard.addEventListener(\"click\", functionDelCard);\r\n  cardsContainer.addEventListener(\"click\", functionLikeCard);\r\n  cardImg.addEventListener(\"click\", handlerOpenPopupZoom);\r\n\r\n  return cardElement;\r\n}\r\n\r\n// @todo: Функция удаления карточки\r\n\r\nexport function delCard(evt) {\r\n  evt.target.closest(\".card\").remove();\r\n}\r\n\r\n//лайк карточки\r\nexport function likeCard(evt) {\r\n  if (evt.target.classList.contains(\"card__like-button\")) {\r\n    evt.target.classList.toggle(\"card__like-button_is-active\");\r\n  }\r\n}\r\n","export const validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_submit_inactive\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__input-error_active\",\r\n};\r\n\r\nconst showInputError = (formElement, inputElement, errorMessage) => {\r\n  // Находим элемент ошибки внутри самой функции\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\nconst hideInputError = (formElement, inputElement) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Функция принимает массив полей\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  // проходим по этому массиву методом some\r\n  return inputList.some((inputElement) => {\r\n    // Если поле не валидно, колбэк вернёт true\r\n    // Обход массива прекратится и вся функция\r\n    // hasInvalidInput вернёт true\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\n// Функция isValid теперь принимает formElement и inputElement,\r\n// а не берёт их из внешней области видимости\r\n\r\nconst isValid = (formElement, inputElement) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    // встроенный метод setCustomValidity принимает на вход строку\r\n    // и заменяет ею стандартное сообщение об ошибке\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    // если передать пустую строку, то будут доступны\r\n    // стандартные браузерные сообщения\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    // теперь, если ошибка вызвана регулярным выражением,\r\n    // переменная validationMessage хранит наше кастомное сообщение\r\n    showInputError(formElement, inputElement, inputElement.validationMessage);\r\n  } else {\r\n    hideInputError(formElement, inputElement);\r\n  }\r\n};\r\n\r\n// Функция принимает массив полей ввода\r\n// и элемент кнопки, состояние которой нужно менять\r\n\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  // Если есть хотя бы один невалидный инпут\r\n  if (hasInvalidInput(inputList)) {\r\n    // сделай кнопку неактивной\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    // иначе сделай кнопку активной\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  // Находим все поля внутри формы,\r\n  // сделаем из них массив методом Array.from\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n  toggleButtonState(inputList, buttonElement);\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((inputElement) => {\r\n    // каждому полю добавим обработчик события input\r\n    inputElement.addEventListener(\"input\", () => {\r\n      // Внутри колбэка вызовем isValid,\r\n      // передав ей форму и проверяемый элемент\r\n      isValid(formElement, inputElement);\r\n      // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  // Найдём все формы с указанным классом в DOM,\r\n  // сделаем из них массив методом Array.from\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n  // Переберём полученную коллекцию\r\n  formList.forEach((formElement) => {\r\n    // Для каждой формы вызовем функцию setEventListeners,\r\n    // передав ей элемент формы\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n// Функция clearValidation, которая очищает\r\n// ошибки валидации формы и делает кнопку отправки формы неактивной\r\n\r\n// Пройтись по всем элементам формы и удалить текст ошибок валидации\r\n// Убрать класс ошибок у соответствующих полей\r\n// Деактивировать кнопку отправки формы\r\n\r\nexport function clearValidation(formElement, validationConfig) {\r\n  // Удаляем текст ошибок валидации и классы ошибок у полей ввода\r\n  const inputElements = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  inputElements.forEach((inputElement) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.remove(validationConfig.inputErrorClass);\r\n    errorElement.textContent = \"\";\r\n    errorElement.classList.remove(validationConfig.errorClass);\r\n  });\r\n\r\n  // Деактивируем кнопку отправки формы\r\n  const submitButton = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  submitButton.classList.add(validationConfig.inactiveButtonClass);\r\n  submitButton.disabled = true;\r\n}\r\n","// функция открытия попапа\r\nexport function openPopup(popup) {\r\n  document.addEventListener(\"keydown\", closePopupEsc);\r\n  popup.classList.add(\"popup_is-opened\");\r\n}\r\n\r\n// функция закрытия попапа\r\nexport function closePopup(popup) {\r\n  document.removeEventListener(\"keydown\", closePopupEsc);\r\n  popup.classList.remove(\"popup_is-opened\");\r\n}\r\n\r\n// функция закрытия попапа нажатием на оверлей\r\nexport function closePopupOverlay(event) {\r\n      if (event.target === event.currentTarget) {\r\n        closePopup(event.currentTarget);\r\n      }\r\n    };\r\n\r\n// функция закрытия попапа нажатием на Esc\r\nexport function closePopupEsc(event) {\r\n  if (event.key === \"Escape\") {\r\n    const popupOpened = document.querySelector(\".popup_is-opened\");\r\n    closePopup(popupOpened);\r\n  }\r\n}","import { initialCards } from \"./cards.js\";\r\n\r\nimport { createCard, delCard, likeCard } from \"../components/card.js\";\r\n\r\nimport {\r\n  validationConfig,\r\n  enableValidation,\r\n  clearValidation,\r\n} from \"../components/validation.js\";\r\n\r\nimport {\r\n  openPopup,\r\n  closePopup,\r\n  closePopupOverlay,\r\n} from \"../components/modal.js\";\r\n\r\nconst popupEditButtonOpen = document.querySelector(\".profile__edit-button\");\r\nconst popupNewCardButtonOpen = document.querySelector(\".profile__add-button\");\r\n\r\nconst popupEdit = document.querySelector(\".popup_type_edit\");\r\n\r\nconst popupNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst popupZoom = document.querySelector(\".popup_type_image\");\r\n\r\nconst popupZoomImg = document.querySelector(\".popup__image\");\r\nconst popupZoomTitle = document.querySelector(\".popup__caption\");\r\n\r\nconst popupInputNewCardTitle = document.querySelector(\r\n  \".popup__input_type_card-name\"\r\n);\r\nconst popupInputNewCardImg = document.querySelector(\".popup__input_type_url\");\r\n\r\nconst profileInfoTitle = document.querySelector(\".profile__title\");\r\nconst profileInfoDescription = document.querySelector(\".profile__description\");\r\n\r\n// Находим форму в DOM\r\nconst formElement = document.querySelector(\".popup__form\");\r\nconst formCreateNC = document.forms.newplace;\r\n\r\n// Находим поля формы в DOM\r\nconst nameInput = formElement.querySelector(\".popup__input_type_name\");\r\n\r\nconst jobInput = formElement.querySelector(\".popup__input_type_description\");\r\n\r\n// @todo: DOM узлы\r\n\r\nconst cardsContainer = document.querySelector(\".places__list\");\r\n\r\n// @todo: Вывести карточки на страницу\r\n\r\nfunction addCard(cardsDataArray) {\r\n  cardsDataArray.forEach((cardData) => {\r\n    const cardImg = cardData.link;\r\n    const cardTitle = cardData.name;\r\n\r\n    const card = createCard(\r\n      cardImg,\r\n      cardTitle,\r\n      delCard,\r\n      likeCard,\r\n      handleOpenPopupZoom\r\n    );\r\n    cardsContainer.append(card);\r\n  });\r\n}\r\n\r\n//функция открытия попапа просмотра фото\r\nfunction openPopupZoom(imageSrc, titleText) {\r\n  popupZoomImg.src = imageSrc;\r\n  popupZoomImg.alt = titleText;\r\n  popupZoomTitle.textContent = titleText;\r\n\r\n  openPopup(popupZoom);\r\n}\r\n\r\n//Обработчик открытия попапа увеличения фото\r\nfunction handleOpenPopupZoom(event) {\r\n  const cardImg = event.target;\r\n\r\n  const card = cardImg.closest(\".card\");\r\n  const cardTitle = card.querySelector(\".card__title\").textContent;\r\n\r\n  openPopupZoom(cardImg.src, cardTitle);\r\n}\r\n\r\n//функция создания новой карточки\r\nfunction createNewCard(evt) {\r\n  evt.preventDefault();\r\n  //значение поля название\r\n  //значение поля ссылка на картинку\r\n  //значение кнопки сохранить - отрисовать новую карточку\r\n  const cardImg = popupInputNewCardImg.value;\r\n  const cardTitle = popupInputNewCardTitle.value;\r\n\r\n  //вешаем слушатель при нажатии на кнопку сохранить, берем эти значения и передаем функции\r\n  //создания createCard(img, title, functionDelCard)\r\n\r\n  const card = createCard(\r\n    cardImg,\r\n    cardTitle,\r\n    delCard,\r\n    likeCard,\r\n    handleOpenPopupZoom\r\n  );\r\n  cardsContainer.prepend(card);\r\n\r\n  //обнуляем импуты\r\n  popupInputNewCardImg.value = \"\";\r\n  popupInputNewCardTitle.value = \"\";\r\n  clearValidation(formCreateNC, validationConfig);\r\n\r\n  closePopup(popupNewCard);\r\n}\r\n\r\n// добавления слушателей и функции закрытия нажатием на крестик\r\nfunction addListenersclosePopup() {\r\n  const popupList = document.querySelectorAll(\".popup\");\r\n  const popupBtnCloseList = document.querySelectorAll(\".popup__close\");\r\n\r\n  popupBtnCloseList.forEach((popupBtn, index) => {\r\n    popupBtn.addEventListener(\"click\", () => {\r\n      closePopup(popupList[index]);\r\n    });\r\n  });\r\n}\r\n\r\n// добавления слушателей и функции закрытия попапа нажатием на оверлей\r\nfunction addListenersclosePopupOverlay() {\r\n  const popupList = Array.from(document.querySelectorAll(\".popup\"));\r\n\r\n  popupList.forEach((popupItem) => {\r\n    popupItem.addEventListener(\"mousedown\", closePopupOverlay);\r\n  });\r\n}\r\n\r\n//функция открытия попапа редактирования\r\nfunction openPopupEdit() {\r\n  nameInput.value = profileInfoTitle.textContent;\r\n  jobInput.value = profileInfoDescription.textContent;\r\n\r\n  nameInput.textContent = profileInfoTitle.value;\r\n  jobInput.textContent = profileInfoDescription.value;\r\n  clearValidation(formElement, validationConfig);\r\n  openPopup(popupEdit);\r\n}\r\n\r\n// Обработчик изменения данных профиль и «отправки» формы, хотя пока\r\n// она никуда отправляться не будет\r\nfunction handleEditFormSubmit(evt) {\r\n  evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.\r\n\r\n  // Получите значение полей jobInput и nameInput из свойства value\r\n  const nameInputValue = nameInput.value;\r\n  const jobInputValue = jobInput.value;\r\n  // Выберите элементы, куда должны быть вставлены значения полей\r\n  // Вставьте новые значения с помощью textContent\r\n  profileInfoTitle.textContent = nameInputValue;\r\n  profileInfoDescription.textContent = jobInputValue;\r\n  closePopup(popupEdit);\r\n}\r\n\r\n//функция открытия попапа создания новой карточки\r\nfunction openPopupNewCard() {\r\n  popupInputNewCardImg.value = \"\";\r\n  popupInputNewCardTitle.value = \"\";\r\n  clearValidation(formCreateNC, validationConfig);\r\n  openPopup(popupNewCard);\r\n}\r\n\r\n//слушатель открытия попапа редактирования\r\npopupEditButtonOpen.addEventListener(\"click\", openPopupEdit);\r\n\r\n//слушатель открытия попапа создания новой карточки\r\npopupNewCardButtonOpen.addEventListener(\"click\", openPopupNewCard);\r\n\r\n//слушатель создания новой карточки\r\nformCreateNC.addEventListener(\"submit\", createNewCard);\r\n\r\n// Прикрепляем обработчик к форме:\r\n// он будет следить за событием “submit” - «отправка»\r\nformElement.addEventListener(\"submit\", handleEditFormSubmit);\r\n\r\n//добавление слушателей закрытия попапа нажатием на крестик\r\naddListenersclosePopup();\r\n\r\naddCard(initialCards);\r\n\r\n//вызов функции закрытия попапа нажатием на оверлей\r\naddListenersclosePopupOverlay();\r\n\r\n// Вызовем функцию\r\n// включение валидации вызовом enableValidation\r\n// все настройки передаются при вызове\r\nenableValidation(validationConfig);\r\n","export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n    }\r\n];"],"names":["createCard","img","title","functionDelCard","functionLikeCard","handlerOpenPopupZoom","cardTemplate","document","querySelector","content","cardsContainer","cardElement","cloneNode","buttonDelCard","cardImg","cardTitle","src","alt","textContent","addEventListener","delCard","evt","target","closest","remove","likeCard","classList","contains","toggle","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","isValid","formElement","inputElement","validity","patternMismatch","setCustomValidity","dataset","errorMessage","valid","errorElement","concat","id","hideInputError","add","showInputError","validationMessage","toggleButtonState","inputList","buttonElement","some","hasInvalidInput","disabled","clearValidation","Array","from","querySelectorAll","forEach","submitButton","openPopup","popup","closePopupEsc","closePopup","removeEventListener","closePopupOverlay","event","currentTarget","key","popupList","popupEditButtonOpen","popupNewCardButtonOpen","popupEdit","popupNewCard","popupZoom","popupZoomImg","popupZoomTitle","popupInputNewCardTitle","popupInputNewCardImg","profileInfoTitle","profileInfoDescription","formCreateNC","forms","newplace","nameInput","jobInput","handleOpenPopupZoom","imageSrc","titleText","value","preventDefault","card","prepend","nameInputValue","jobInputValue","popupBtn","index","name","link","cardData","append","popupItem","setEventListeners","enableValidation"],"sourceRoot":""}