{"version":3,"file":"main.js","mappings":"yBACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,C,mBCpBO,SAASG,EAAUC,GAQvB,IAPDC,EAAGD,EAAHC,IACAC,EAAKF,EAALE,MACAC,EAAeH,EAAfG,gBACAC,EAAcJ,EAAdI,eACAC,EAAoBL,EAApBK,qBACAC,EAAQN,EAARM,SACAC,EAAaP,EAAbO,cAGMC,EADeC,SAASC,cAAc,kBAAkBC,QAC7BD,cAAc,SAASE,WAAU,GAC5DC,EAAgBL,EAAYE,cAAc,wBAC1CI,EAAiBN,EAAYE,cAAc,sBAC3CK,EAAUP,EAAYE,cAAc,gBACpCM,EAAYR,EAAYE,cAAc,gBACtCO,EAAcT,EAAYE,cAAc,sBAgC9C,OA9BAK,EAAQG,IAAMjB,EACdc,EAAQI,IAAMjB,EACdc,EAAUI,YAAclB,EAGxBe,EAAYG,YAAcd,EAASe,MAAMC,OAGrChB,EAASe,MAAME,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAQlB,CAAa,KAC1DO,EAAeY,UAAUC,IAAI,+BAI3BrB,EAASsB,MAAMH,MAAQlB,EACzBM,EAAcgB,SAGdhB,EAAciB,iBAAiB,SAAS,kBACtC3B,EAAgBK,EAAaF,EAASmB,IAAI,IAI9CX,EAAegB,iBAAiB,SAAS,WACvC,IAAMC,EAAUjB,EAAeY,UAAUM,SACvC,+BAEF5B,EAAeI,EAAaF,EAASmB,IAAKM,EAC5C,IACAhB,EAAQe,iBAAiB,QAASzB,GAE3BG,CACT,CClDO,SAASyB,EAAcC,GAC5B,OAAIA,EAAIC,GACCD,EAAIE,OAEJC,QAAQC,OAAO,WAADC,OAAYL,EAAIM,QAEzC,CAGO,SAASC,EACdC,EACAC,GAGA,IAFAC,EAAUC,UAAAvB,OAAA,QAAA3B,IAAAkD,UAAA,GAAAA,UAAA,GAAG,YACbC,EAAWD,UAAAvB,OAAA,QAAA3B,IAAAkD,UAAA,GAAAA,UAAA,GAAG,gBAGZF,EAAOvB,YADLsB,EACmBI,EAEAF,CAEzB,CAGO,SAASG,EAAaC,EAASC,GAAoC,IAA/BH,EAAWD,UAAAvB,OAAA,QAAA3B,IAAAkD,UAAA,GAAAA,UAAA,GAAG,gBAEvDI,EAAIC,iBAEJ,IAAMC,EAAQ1C,SAASC,cAAc,oBAE/B0C,EAAeH,EAAII,UAEnBC,EAAcF,EAAahC,YAGjC,OADAqB,GAAc,EAAMW,EAAcE,EAAaR,GAE7CE,IACGO,MAAK,WAGJN,EAAIO,OAAOC,QACXN,EAAMzB,UAAUG,OAAO,kBACzB,IACC6B,OAAM,SAACC,GAENC,QAAQC,MAAM,WAADtB,OAAYoB,GAC3B,IAECG,SAAQ,WACPrB,GAAc,EAAOW,EAAcE,EACrC,GAEN,C,krCCjDO,IAAMS,EAEF,CACPC,cAAe,uCACf,eAAgB,oBAKPhB,EAAU,SAACiB,GAA2B,IAAjBC,EAAOrB,UAAAvB,OAAA,QAAA3B,IAAAkD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAErCsB,EAAM,GAAH5B,OAVA,mDAUoBA,OAAG0B,GAE1BG,EAAOC,EAAAA,EAAA,GACRN,GACAG,EAAQE,SAIb,OAAOE,MAAMH,EAAGE,EAAAA,EAAA,GACXH,GAAO,IACVE,QAAAA,KACCb,KAAKtB,EACV,ECzBasC,EAAmB,CAC9BC,aAAc,eACdC,cAAe,gBACfC,qBAAsB,iBACtBC,oBAAqB,gCACrBC,gBAAiB,0BACjBC,WAAY,6BAYRC,EAAiB,SAACC,EAAaC,GAEnC,IAAMC,EAAeF,EAAYrE,cAAc,IAAD6B,OAAKyC,EAAaE,GAAE,WAElEF,EAAatD,UAAUG,OAAO0C,EAAiBK,iBAC/CK,EAAavD,UAAUG,OAAO0C,EAAiBM,YAC/CI,EAAa7D,YAAc,EAC7B,EAiBM+D,EAAU,SAACJ,EAAaC,GACxBA,EAAaI,SAASC,gBAGxBL,EAAaM,kBAAkBN,EAAaO,QAAQC,cAIpDR,EAAaM,kBAAkB,IAG5BN,EAAaI,SAASK,MAKzBX,EAAeC,EAAaC,GAjDT,SAACD,EAAaC,EAAcQ,GAEjD,IAAMP,EAAeF,EAAYrE,cAAc,IAAD6B,OAAKyC,EAAaE,GAAE,WAElEF,EAAatD,UAAUC,IAAI4C,EAAiBK,iBAC5CK,EAAa7D,YAAcoE,EAC3BP,EAAavD,UAAUC,IAAI4C,EAAiBM,WAC9C,CAwCIa,CAAeX,EAAaC,EAAcA,EAAaW,kBAI3D,EAGaC,EAAgB,SAACC,GAC5BA,EAAcC,UAAW,EACzBD,EAAcnE,UAAUC,IAAI4C,EAAiBI,oBAC/C,EAWMoB,EAAoB,SAACC,EAAWH,IAhDd,SAACG,GAEvB,OAAOA,EAAUzE,MAAK,SAACyD,GAIrB,OAAQA,EAAaI,SAASK,KAChC,GACF,CA0CMQ,CAAgBD,GAVD,SAACH,GACpBA,EAAcC,UAAW,EACzBD,EAAcnE,UAAUG,OAAO0C,EAAiBI,oBAClD,CAYIuB,CAAaL,GAHbD,EAAcC,EAKlB,EAoDO,SAASM,EAAgBpB,EAAaR,GAE3C,IAAM6B,EAAgBC,MAAMC,KAC1BvB,EAAYwB,iBAAiBhC,EAAiBE,gBAEhD2B,EAAcI,SAAQ,SAACxB,GACrBF,EAAeC,EAAaC,EAC9B,IAGA,IAAM5B,EAAe2B,EAAYrE,cAC/B6D,EAAiBG,sBAEnBqB,EAAkBK,EAAehD,EACnC,CCvJO,SAASqD,EAAUtD,GACxB1C,SAASqB,iBAAiB,UAAW4E,GACrCvD,EAAMzB,UAAUC,IAAI,kBACtB,CAGO,SAASgF,EAAWxD,GACzB1C,SAASmG,oBAAoB,UAAWF,GACxCvD,EAAMzB,UAAUG,OAAO,kBACzB,CAGO,SAASgF,EAAkBC,GACxBA,EAAMtD,SAAWsD,EAAMC,eACzBJ,EAAWG,EAAMC,cAErB,CAGG,SAASL,EAAcI,GACV,WAAdA,EAAME,KAERL,EADoBlG,SAASC,cAAc,oBAG/C,C,sGCKA,IAgFQuG,EAhFJC,EAAqB,KAEnBC,EAAsB1G,SAASC,cAAc,yBAC7C0G,EAAyB3G,SAASC,cAAc,wBAEhD2G,EAAY5G,SAASC,cAAc,oBACnC4G,EAAoB7G,SAASC,cAAc,6BAC3C6G,EAAuB9G,SAASC,cAAc,wBAC9C8G,EAAe/G,SAASC,cAAc,wBACtC+G,EAAYhH,SAASC,cAAc,qBAEnCgH,EAAmBjH,SAASC,cAChC,mCAGIiH,EAAelH,SAASC,cAAc,iBACtCkH,EAAiBnH,SAASC,cAAc,mBAExCmH,EAAyBpH,SAASC,cACtC,gCAEIoH,EAAuBrH,SAASC,cAAc,0BAE9CqH,EAAmBtH,SAASC,cAAc,mBAC1CsH,EAAmBvH,SAASC,cAAc,mBAC1CuH,EAAyBxH,SAASC,cAAc,yBAGhDqE,EAActE,SAASC,cAAc,gBACrCwH,EAAezH,SAAS0H,MAAMC,SAG9BC,EAAYtD,EAAYrE,cAAc,2BACtC4H,EAAWvD,EAAYrE,cAAc,kCAErC6H,EAAc9H,SAASC,cAAc,oCAIrC8H,EAAiB/H,SAASC,cAAc,iBA8B9C,SAAS+H,EAAoB3B,GAC3B,IAVqB4B,EAAUC,EAUzB5H,EAAU+F,EAAMtD,OAGhBxC,EADOD,EAAQ6H,QAAQ,SACNlI,cAAc,gBAAgBU,YAbhCsH,EAeP3H,EAAQG,IAfSyH,EAeJ3H,EAd3B2G,EAAazG,IAAMwH,EACnBf,EAAaxG,IAAMwH,EACnBf,EAAexG,YAAcuH,EAE7BlC,EAAUgB,EAWZ,CA2GA,SAASoB,EAAsBrI,EAAasI,GAC1C5B,EAAqB,CAAE6B,QAASvI,EAAa0E,GAAI4D,GACjDrC,EAAUc,EACZ,CAmBA,SAASnH,EAAeI,EAAasI,EAAQ/G,GAC3C,IAAMiH,EAAaxI,EAAYE,cAAc,sBACvCO,EAAcT,EAAYE,cAAc,sBAE1CqB,EHvKqB,SAAC+G,GAC1B,OAAO9F,EAAQ,gBAADT,OAAiBuG,GAAU,CACvCG,OAAQ,UAEZ,CGoKIC,CAAYJ,GACTvF,MAAK,SAAC4F,GACLH,EAAWtH,UAAUG,OAAO,+BAC5BZ,EAAYG,YAAc+H,EAAY9H,MAAMC,MAC9C,IACCoC,OAAM,SAACC,GACNC,QAAQC,MAAM,8BAADtB,OAA+BoB,GAC9C,IHtLqB,SAACmF,GAC1B,OAAO9F,EAAQ,gBAADT,OAAiBuG,GAAU,CACvCG,OAAQ,OAEZ,CGoLIG,CAAYN,GACTvF,MAAK,SAAC4F,GACLH,EAAWtH,UAAUC,IAAI,+BACzBV,EAAYG,YAAc+H,EAAY9H,MAAMC,MAC9C,IACCoC,OAAM,SAACC,GACNC,QAAQC,MAAM,gCAADtB,OAAiCoB,GAChD,GAEN,CArGAtB,QAAQgH,IAAI,CHhIHrG,EAAQ,aAAaO,MAAK,SAAC+F,GAEhC,OADA1F,QAAQ2F,IAAID,GACLA,CACT,IAKOtG,EAAQ,UAAUO,MAAK,SAAC+F,GAE7B,OADA1F,QAAQ2F,IAAID,GACLA,CACT,MGsHC/F,MAAK,SAAAvD,GAA2B,IAPRwJ,EAAMC,EAAOC,E,IAOLC,G,EAAA,E,4CAAA3J,I,s1BAAzB4J,EAAQD,EAAA,GAAEE,EAASF,EAAA,GACnBpJ,EAAgBqJ,EAASnI,IARR+H,EAWLI,EAASJ,KAXEC,EAWIG,EAASH,MAXNC,EAWaE,EAASF,OAV5D1B,EAAiB5G,YAAcoI,EAC/BvB,EAAuB7G,YAAcqI,EACrC1B,EAAiB+B,MAAMC,gBAAkB,QAAHxH,OAAWmH,EAAM,MAhFzD,SAAkBM,EAAgBzJ,GAAmC,IAApB0I,EAAMpG,UAAAvB,OAAA,QAAA3B,IAAAkD,UAAA,GAAAA,UAAA,GAAG,UACxDmH,EAAexD,SAAQ,SAAClG,GACtB,IAAM2J,EAAOlK,EAAW,CACtBE,IAAKK,EAAS4J,KACdhK,MAAOI,EAASkJ,KAChBrJ,gBAAiB0I,EACjBzI,eAAgBA,EAChBC,qBAAsBoI,EACtBnI,SAAUA,EACVC,cAAeA,IAEjBiI,EAAeS,GAAQgB,EACzB,GACF,CA4EIE,CAASN,EAAWtJ,EAAe,SACrC,IACCmD,OAAM,SAACC,GACNC,QAAQ2F,IAAI5F,EACd,IAkHFwD,EAAoBrF,iBAAiB,SAvJrC,WACE,IAAM+D,EAAgBwB,EAAU3G,cAAc,kBAE9CkF,EAAcC,GAEdwC,EAAU+B,MAAQpC,EAAiB5G,YACnCkH,EAAS8B,MAAQnC,EAAuB7G,YAExC+E,EAAgBpB,EAAaR,GAC7BkC,EAAUY,EACZ,IAgJAU,EAAiBjG,iBAAiB,SAAS,kBAAM2E,EAAUa,EAAkB,IAG7EF,EAAuBtF,iBAAiB,SAhJxC,WACEgG,EAAqBsC,MAAQ,GAC7BvC,EAAuBuC,MAAQ,GAC/BjE,EAAgB+B,EAAc3D,GAC9BkC,EAAUe,EACZ,IA8IAU,EAAapG,iBAAiB,UAvG9B,SAAmCmB,GAsBjCF,GArBA,WAEE,IAAMhC,EAAU+G,EAAqBsC,MAGrC,OHxGyB,SAACpJ,EAAWD,GACvC,OAAOiC,EAAQ,SAAU,CACvBiG,OAAQ,OACRoB,KAAMC,KAAKC,UAAU,CACnBf,KAAMxI,EACNkJ,KAAMnJ,KAGZ,CGgGWyJ,CAFW3C,EAAuBuC,MAETrJ,GAASwC,MAAK,SAACkH,GAE7C,IAAMR,EAAOlK,EAAW,CACtBE,IAAKwK,EAAYP,KACjBhK,MAAOuK,EAAYjB,KACnBrJ,gBAAiB0I,EACjBzI,eAAgBA,EAChBC,qBAAsBoI,EACtBnI,SAAUmK,EACVlK,cAAekK,EAAY7I,MAAMH,MAGnC+G,EAAekC,QAAQT,EACzB,GACF,GAE0BhH,EAC5B,IAoFA8B,EAAYjD,iBAAiB,UA5H7B,SAA8BmB,GAa5BF,GAXA,WAIE,OHpI2ByG,EGiIdnB,EAAU+B,MHjIUX,EGkInBnB,EAAS8B,MHjIlBpH,EAAQ,YAAa,CAC1BiG,OAAQ,QACRoB,KAAMC,KAAKC,UAAU,CACnBf,KAAMA,EACNC,MAAOA,MAERlG,MAAK,SAACoH,GAEP,OADA/G,QAAQ2F,IAAI,oBAAqBoB,GAC1BA,CACT,KG0HqCpH,MAAK,SAACqH,GAEvC5C,EAAiB5G,YAAcwJ,EAASpB,KACxCvB,EAAuB7G,YAAcwJ,EAASnB,KAChD,IHxI0B,IAACD,EAAMC,CGyInC,GAE0BxG,EAC5B,IA1EQgE,EAAYxG,SAAS8F,iBAAiB,UAClB9F,SAAS8F,iBAAiB,iBAElCC,SAAQ,SAACqE,EAAUC,GACnCD,EAAS/I,iBAAiB,SAAS,WACjC6E,EAAWM,EAAU6D,GACvB,GACF,IAKkBzE,MAAMC,KAAK7F,SAAS8F,iBAAiB,WAE7CC,SAAQ,SAACuE,GACjBA,EAAUjJ,iBAAiB,YAAa+E,EAC1C,IFT8B,SAACtC,GAGd8B,MAAMC,KACrB7F,SAAS8F,iBAAiBhC,EAAiBC,eAGpCgC,SAAQ,SAACzB,IApCM,SAACA,EAAaR,GAGtC,IAAMyB,EAAYK,MAAMC,KACtBvB,EAAYwB,iBAAiBhC,EAAiBE,gBAE1CoB,EAAgBd,EAAYrE,cAChC6D,EAAiBG,sBAGnBqB,EAAkBC,EAAWH,GAG7Bd,EAAYjD,iBAAiB,SAAS,WACpC8D,EAAcC,EAChB,IAEAG,EAAUQ,SAAQ,SAACxB,GAEjBA,EAAalD,iBAAiB,SAAS,WAGrCqD,EAAQJ,EAAaC,GAErBe,EAAkBC,EAAWH,EAC/B,GACF,GACF,CAYImF,CAAkBjG,EAAaR,EACjC,GACF,CE+KA0G,CAAiB1G,GAGjBgD,EAAqBzF,iBAAiB,UAxFtC,SAAgCmB,GHjKN,IAAC6F,EGkKzB7F,EAAIC,iBAEAgE,IHpKqB4B,EGqKZ5B,EAAmBhC,GHpKzBlC,EAAQ,UAADT,OAAWuG,GAAU,CACjCG,OAAQ,YGoKL1F,MAAK,WACJ2D,EAAmB6B,QAAQlH,SAC3B8E,EAAWY,EACb,IACC7D,OAAM,SAACC,GACNC,QAAQC,MAAM,iCAADtB,OAAkCoB,GACjD,GAEN,IA6EA+D,EAAiB5F,iBAAiB,UAhDlC,SAA4BmB,GAgB1BF,GAfA,WACE,IHnK0BoB,EGmKpB+G,EAAmB3C,EAAY6B,MAGrC,OHtK0BjG,EGsKL+G,EHrKhB5G,MAAMH,EAAK,CAAE8E,OAAQ,SACzB1F,MAAK,SAAC4H,GACL,IAAKA,EAAShJ,GACZ,OAAOE,QAAQC,OAAO,WAADC,OAAY4I,EAAS3I,SAG5C,IAAM4I,EAAcD,EAAS/G,QAAQiH,IAAI,gBACzC,SAAID,IAAeA,EAAYE,WAAW,YAGjCjJ,QAAQC,OAAO,qBAE1B,IACCoB,OAAM,SAACG,GAEN,OADAD,QAAQC,MAAM,SAAUA,IACjB,CACT,KGqJuCN,MAAK,SAAC4B,GAC3C,GAAIA,EACF,OH7LqBuE,EG6LDwB,EH5LnBlI,EAAQ,mBAAoB,CACjCiG,OAAQ,QACRoB,KAAMC,KAAKC,UAAU,CACnBb,OAAQA,OGyLgCnG,MAAK,SAACgI,GAC1CxD,EAAiB+B,MAAMC,gBAAkB,QAAHxH,OAAWgJ,EAAY7B,OAAM,KACrE,IH/LoB,IAACA,EGiMrB9F,QAAQC,MAAM,8CAElB,GACF,GAE0BZ,EAC5B,I","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/utils.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// @todo: Функция создания карточки\r\n\r\nexport function createCard({\r\n  img,\r\n  title,\r\n  functionDelCard,\r\n  handleLikeCard,\r\n  handlerOpenPopupZoom,\r\n  cardData,\r\n  currentUserId,\r\n}) {\r\n  const cardTemplate = document.querySelector(\"#card-template\").content;\r\n  const cardElement = cardTemplate.querySelector(\".card\").cloneNode(true);\r\n  const buttonDelCard = cardElement.querySelector(\".card__delete-button\");\r\n  const buttonLikeCard = cardElement.querySelector(\".card__like-button\");\r\n  const cardImg = cardElement.querySelector(\".card__image\");\r\n  const cardTitle = cardElement.querySelector(\".card__title\");\r\n  const likeCounter = cardElement.querySelector(\".card__like-number\");\r\n\r\n  cardImg.src = img;\r\n  cardImg.alt = title;\r\n  cardTitle.textContent = title;\r\n\r\n  //подгружаем кол-во лайков с сервера\r\n  likeCounter.textContent = cardData.likes.length;\r\n\r\n  //проверяем есть ли наши лайки, если есть то красим сердце в черный\r\n  if (cardData.likes.some((like) => like._id === currentUserId)) {\r\n    buttonLikeCard.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  // проверка на владельца карточки\r\n  if (cardData.owner._id !== currentUserId) {\r\n    buttonDelCard.remove(); // Удаляем кнопку, если карточка создана не нами\r\n  } else {\r\n    // Вешаем событие только на свои карточки\r\n    buttonDelCard.addEventListener(\"click\", () =>\r\n      functionDelCard(cardElement, cardData._id)\r\n    );\r\n  }\r\n\r\n  buttonLikeCard.addEventListener(\"click\", () => {\r\n    const isLiked = buttonLikeCard.classList.contains(\r\n      \"card__like-button_is-active\"\r\n    );\r\n    handleLikeCard(cardElement, cardData._id, isLiked);\r\n  });\r\n  cardImg.addEventListener(\"click\", handlerOpenPopupZoom);\r\n\r\n  return cardElement;\r\n}\r\n\r\n// @todo: Функция удаления карточки\r\n\r\n// export function delCard(evt) {\r\n//   evt.target.closest(\".card\").remove();\r\n// }\r\n\r\n//лайк карточки\r\n// export function likeCard(evt) {\r\n//   if (evt.target.classList.contains(\"card__like-button\")) {\r\n//     evt.target.classList.toggle(\"card__like-button_is-active\");\r\n//   }\r\n// }\r\n","export function checkResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  } else {\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n}\r\n\r\n// универсальная функция управления текстом кнопки\r\nexport function renderLoading(\r\n  isLoading,\r\n  button,\r\n  buttonText = \"Сохранить\",\r\n  loadingText = \"Сохранение...\"\r\n) {\r\n  if (isLoading) {\r\n    button.textContent = loadingText;\r\n  } else {\r\n    button.textContent = buttonText;\r\n  }\r\n}\r\n\r\n// универсальная функция, которая принимает функцию запроса, объект события и текст во время загрузки\r\nexport function handleSubmit(request, evt, loadingText = \"Сохранение...\") {\r\n  // всегда нужно предотвращать перезагрузку формы при сабмите\r\n  evt.preventDefault();\r\n\r\n  const popup = document.querySelector(\".popup_is-opened\");\r\n  // универсально получаем кнопку сабмита из `evt`\r\n  const submitButton = evt.submitter;\r\n  // записываем начальный текст кнопки до вызова запроса\r\n  const initialText = submitButton.textContent;\r\n  // изменяем текст кнопки до вызова запроса\r\n  renderLoading(true, submitButton, initialText, loadingText);\r\n  return (\r\n    request()\r\n      .then(() => {\r\n        // любую форму нужно очищать после успешного ответа от сервера\r\n        // а также `reset` может запустить деактивацию кнопки сабмита (смотрите в `validate.js`)\r\n        evt.target.reset();\r\n        popup.classList.remove(\"popup_is-opened\"); //закрываем попап после успешного ответа\r\n      })\r\n      .catch((err) => {\r\n        // в каждом запросе нужно ловить ошибку\r\n        console.error(`Ошибка: ${err}`);\r\n      })\r\n      // в каждом запросе в `finally` нужно возвращать обратно начальный текст кнопки\r\n      .finally(() => {\r\n        renderLoading(false, submitButton, initialText);\r\n      })\r\n  );\r\n}\r\n","import { checkResponse } from \"./utils.js\";\r\n\r\nexport const config = {\r\n  baseUrl: \"https://mesto.nomoreparties.co/v1/wff-cohort-21\",\r\n  headers: {\r\n    authorization: \"adfb87df-3032-40f6-8edf-de055a5b3295\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n// Универсальная функция запроса с проверкой ответа\r\nexport const request = (endpoint, options = {}) => {\r\n  // базовый URL и конечный\r\n  const url = `${config.baseUrl}${endpoint}`;\r\n\r\n  const headers = {\r\n    ...config.headers,\r\n    ...options.headers,\r\n  };\r\n\r\n  // Выполняем запрос и проверяем ответ\r\n  return fetch(url, {\r\n    ...options,\r\n    headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n//запрос на сервер для получения обьекта с первоначальными данными пользователя\r\nexport const getInitialUser = () => {\r\n  return request(\"/users/me\").then((result) => {\r\n    console.log(result);\r\n    return result;\r\n  });\r\n};\r\n\r\n//запрос на сервер для получения массива обьектов с данными карточек других пользователей\r\nexport const getCardsDescription = () => {\r\n  return request(\"/cards\").then((result) => {\r\n    console.log(result);\r\n    return result;\r\n  });\r\n};\r\n\r\n// Функция для обновления профиля на сервере\r\nexport const renameUserData = (name, about) => {\r\n  return request(\"/users/me\", {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  }).then((data) => {\r\n    console.log(\"Профиль обновлен:\", data);\r\n    return data;\r\n  });\r\n};\r\n\r\n//запрос на сервер для удаления карточки\r\nexport const deleteCard = (cardId) => {\r\n  return request(`/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n};\r\n\r\n//запрос на сервер для установки лайка\r\nexport const addLikeCard = (cardId) => {\r\n  return request(`/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n  });\r\n};\r\n\r\n//запрос на сервер для удаления лайка\r\nexport const delLikeCard = (cardId) => {\r\n  return request(`/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n};\r\n\r\n//запрос на сервер с данными нового аватара\r\nexport const changeAvatar = (avatar) => {\r\n  return request(\"/users/me/avatar\", {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify({\r\n      avatar: avatar,\r\n    }),\r\n  });\r\n};\r\n\r\n// //запрос на сервер для создания новой карточки\r\nexport const createNewCard = (cardTitle, cardImg) => {\r\n  return request(\"/cards\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      name: cardTitle,\r\n      link: cardImg,\r\n    }),\r\n  });\r\n};\r\n\r\n//функция проверки действительности и URL изображения\r\nexport const checkImageUrl = (url) => {\r\n  return fetch(url, { method: \"HEAD\" })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        return Promise.reject(`Ошибка: ${response.status}`);\r\n      }\r\n      // Проверка на url\r\n      const contentType = response.headers.get(\"Content-Type\");\r\n      if (contentType && contentType.startsWith(\"image/\")) {\r\n        return true;\r\n      } else {\r\n        return Promise.reject(\"Ошибка: Это не url\");\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error:\", error);\r\n      return false;\r\n    });\r\n};\r\n","export const validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_submit_inactive\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__input-error_active\",\r\n};\r\n\r\nconst showInputError = (formElement, inputElement, errorMessage) => {\r\n  // Находим элемент ошибки внутри самой функции\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\nconst hideInputError = (formElement, inputElement) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  // Остальной код такой же\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Функция принимает массив полей\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  // проходим по этому массиву методом some\r\n  return inputList.some((inputElement) => {\r\n    // Если поле не валидно, колбэк вернёт true\r\n    // Обход массива прекратится и вся функция\r\n    // hasInvalidInput вернёт true\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\n// Функция isValid теперь принимает formElement и inputElement,\r\n// а не берёт их из внешней области видимости\r\n\r\nconst isValid = (formElement, inputElement) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    // встроенный метод setCustomValidity принимает на вход строку\r\n    // и заменяет ею стандартное сообщение об ошибке\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    // если передать пустую строку, то будут доступны\r\n    // стандартные браузерные сообщения\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    // теперь, если ошибка вызвана регулярным выражением,\r\n    // переменная validationMessage хранит наше кастомное сообщение\r\n    showInputError(formElement, inputElement, inputElement.validationMessage);\r\n  } else {\r\n    hideInputError(formElement, inputElement);\r\n  }\r\n};\r\n\r\n// Функция для деактивации кнопки\r\nexport const disableButton = (buttonElement) => {\r\n  buttonElement.disabled = true;\r\n  buttonElement.classList.add(validationConfig.inactiveButtonClass); // добавляем класс для стилизации неактивной кнопки\r\n};\r\n\r\n// Функция для активации кнопки\r\nconst enableButton = (buttonElement) => {\r\n  buttonElement.disabled = false;\r\n  buttonElement.classList.remove(validationConfig.inactiveButtonClass); // Убираем класс неактивной кнопки\r\n};\r\n\r\n// Функция принимает массив полей ввода\r\n// и элемент кнопки, состояние которой нужно менять\r\n\r\nconst toggleButtonState = (inputList, buttonElement) => {\r\n  // Если есть хотя бы один невалидный инпут\r\n  if (hasInvalidInput(inputList)) {\r\n    // сделай кнопку неактивной\r\n    disableButton(buttonElement);\r\n  } else {\r\n    // иначе сделай кнопку активной\r\n    enableButton(buttonElement);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  // Находим все поля внутри формы,\r\n  // сделаем из них массив методом Array.from\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n  toggleButtonState(inputList, buttonElement);\r\n\r\n  // Добавляем обработчик события 'reset', который деактивирует кнопку\r\n  formElement.addEventListener(\"reset\", () => {\r\n    disableButton(buttonElement);\r\n  });\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((inputElement) => {\r\n    // каждому полю добавим обработчик события input\r\n    inputElement.addEventListener(\"input\", () => {\r\n      // Внутри колбэка вызовем isValid,\r\n      // передав ей форму и проверяемый элемент\r\n      isValid(formElement, inputElement);\r\n      // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n      toggleButtonState(inputList, buttonElement);\r\n    });\r\n  });\r\n};\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  // Найдём все формы с указанным классом в DOM,\r\n  // сделаем из них массив методом Array.from\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n  // Переберём полученную коллекцию\r\n  formList.forEach((formElement) => {\r\n    // Для каждой формы вызовем функцию setEventListeners,\r\n    // передав ей элемент формы\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n// Функция clearValidation, которая очищает\r\n// ошибки валидации формы и делает кнопку отправки формы неактивной\r\n\r\n// Пройтись по всем элементам формы и удалить текст ошибок валидации\r\n// Убрать класс ошибок у соответствующих полей\r\n// Деактивировать кнопку отправки формы\r\n\r\nexport function clearValidation(formElement, validationConfig) {\r\n  // Удаляем текст ошибок валидации и классы ошибок у полей ввода\r\n  const inputElements = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  inputElements.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement);\r\n  });\r\n\r\n  // Деактивируем кнопку отправки формы\r\n  const submitButton = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  toggleButtonState(inputElements, submitButton);\r\n}\r\n","// функция открытия попапа\r\nexport function openPopup(popup) {\r\n  document.addEventListener(\"keydown\", closePopupEsc);\r\n  popup.classList.add(\"popup_is-opened\");\r\n}\r\n\r\n// функция закрытия попапа\r\nexport function closePopup(popup) {\r\n  document.removeEventListener(\"keydown\", closePopupEsc);\r\n  popup.classList.remove(\"popup_is-opened\");\r\n}\r\n\r\n// функция закрытия попапа нажатием на оверлей\r\nexport function closePopupOverlay(event) {\r\n      if (event.target === event.currentTarget) {\r\n        closePopup(event.currentTarget);\r\n      }\r\n    };\r\n\r\n// функция закрытия попапа нажатием на Esc\r\nexport function closePopupEsc(event) {\r\n  if (event.key === \"Escape\") {\r\n    const popupOpened = document.querySelector(\".popup_is-opened\");\r\n    closePopup(popupOpened);\r\n  }\r\n}","import { createCard } from \"../components/card.js\";\r\n\r\nimport { handleSubmit } from \"../components/utils.js\";\r\n\r\nimport {\r\n  config,\r\n  getInitialUser,\r\n  getCardsDescription,\r\n  renameUserData,\r\n  deleteCard,\r\n  addLikeCard,\r\n  delLikeCard,\r\n  changeAvatar,\r\n  checkImageUrl,\r\n  createNewCard,\r\n} from \"../components/api.js\";\r\n\r\nimport {\r\n  validationConfig,\r\n  enableValidation,\r\n  clearValidation,\r\n  disableButton,\r\n} from \"../components/validation.js\";\r\n\r\nimport {\r\n  openPopup,\r\n  closePopup,\r\n  closePopupOverlay,\r\n} from \"../components/modal.js\";\r\n\r\nlet currentCardElement = null; // Переменная для хранения текущей карточки\r\n\r\nconst popupEditButtonOpen = document.querySelector(\".profile__edit-button\");\r\nconst popupNewCardButtonOpen = document.querySelector(\".profile__add-button\");\r\n\r\nconst popupEdit = document.querySelector(\".popup_type_edit\");\r\nconst popupAvatarUpdate = document.querySelector(\".popup_type_update-avatar\");\r\nconst popupDelCardQuestion = document.querySelector(\".popup_type_question\");\r\nconst popupNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst popupZoom = document.querySelector(\".popup_type_image\");\r\n\r\nconst updateAvatarForm = document.querySelector(\r\n  \".popup__form_type_update-avatar\"\r\n);\r\n\r\nconst popupZoomImg = document.querySelector(\".popup__image\");\r\nconst popupZoomTitle = document.querySelector(\".popup__caption\");\r\n\r\nconst popupInputNewCardTitle = document.querySelector(\r\n  \".popup__input_type_card-name\"\r\n);\r\nconst popupInputNewCardImg = document.querySelector(\".popup__input_type_url\");\r\n\r\nconst profileAvatarImg = document.querySelector(\".profile__image\");\r\nconst profileInfoTitle = document.querySelector(\".profile__title\");\r\nconst profileInfoDescription = document.querySelector(\".profile__description\");\r\n\r\n// Находим форму в DOM(любую, не обязательно profileForm (форма профиля))\r\nconst formElement = document.querySelector(\".popup__form\");\r\nconst formCreateNC = document.forms.newplace;\r\n\r\n// Находим поля формы в DOM\r\nconst nameInput = formElement.querySelector(\".popup__input_type_name\");\r\nconst jobInput = formElement.querySelector(\".popup__input_type_description\");\r\n\r\nconst avatarInput = document.querySelector(\".popup__input_type_update-avatar\");\r\n\r\n// @todo: DOM узлы\r\n\r\nconst cardsContainer = document.querySelector(\".places__list\");\r\n\r\n// @todo: Вывести карточки на страницу\r\n\r\n// Функция добавления карточки на страницу\r\nfunction addCards(cardsDataArray, currentUserId, method = \"prepend\") {\r\n  cardsDataArray.forEach((cardData) => {\r\n    const card = createCard({\r\n      img: cardData.link,\r\n      title: cardData.name,\r\n      functionDelCard: handleOpenDeletePopup,\r\n      handleLikeCard: handleLikeCard,\r\n      handlerOpenPopupZoom: handleOpenPopupZoom,\r\n      cardData: cardData,\r\n      currentUserId: currentUserId,\r\n    });\r\n    cardsContainer[method](card);\r\n  });\r\n}\r\n\r\n//функция открытия попапа просмотра фото\r\nfunction openPopupZoom(imageSrc, titleText) {\r\n  popupZoomImg.src = imageSrc;\r\n  popupZoomImg.alt = titleText;\r\n  popupZoomTitle.textContent = titleText;\r\n\r\n  openPopup(popupZoom);\r\n}\r\n\r\n//Обработчик открытия попапа увеличения фото\r\nfunction handleOpenPopupZoom(event) {\r\n  const cardImg = event.target;\r\n\r\n  const card = cardImg.closest(\".card\");\r\n  const cardTitle = card.querySelector(\".card__title\").textContent;\r\n\r\n  openPopupZoom(cardImg.src, cardTitle);\r\n}\r\n\r\n// добавления слушателей и функции закрытия нажатием на крестик\r\nfunction addListenersClosePopup() {\r\n  const popupList = document.querySelectorAll(\".popup\");\r\n  const popupBtnCloseList = document.querySelectorAll(\".popup__close\");\r\n\r\n  popupBtnCloseList.forEach((popupBtn, index) => {\r\n    popupBtn.addEventListener(\"click\", () => {\r\n      closePopup(popupList[index]);\r\n    });\r\n  });\r\n}\r\n\r\n// добавления слушателей и функции закрытия попапа нажатием на оверлей\r\nfunction addListenersClosePopupOverlay() {\r\n  const popupList = Array.from(document.querySelectorAll(\".popup\"));\r\n\r\n  popupList.forEach((popupItem) => {\r\n    popupItem.addEventListener(\"mousedown\", closePopupOverlay);\r\n  });\r\n}\r\n\r\n//функция открытия попапа редактирования\r\nfunction openPopupEdit() {\r\n  const buttonElement = popupEdit.querySelector(\".popup__button\");\r\n\r\n  disableButton(buttonElement);\r\n\r\n  nameInput.value = profileInfoTitle.textContent;\r\n  jobInput.value = profileInfoDescription.textContent;\r\n\r\n  clearValidation(formElement, validationConfig);\r\n  openPopup(popupEdit);\r\n}\r\n\r\n//функция открытия попапа создания новой карточки\r\nfunction openPopupNewCard() {\r\n  popupInputNewCardImg.value = \"\";\r\n  popupInputNewCardTitle.value = \"\";\r\n  clearValidation(formCreateNC, validationConfig);\r\n  openPopup(popupNewCard);\r\n}\r\n\r\n// Функция для обновления информации профиля\r\nfunction updateProfileInfo(name, about, avatar) {\r\n  profileInfoTitle.textContent = name;\r\n  profileInfoDescription.textContent = about;\r\n  profileAvatarImg.style.backgroundImage = `url('${avatar}')`;\r\n}\r\n\r\nPromise.all([getInitialUser(), getCardsDescription()])\r\n  .then(([dataUser, dataCards]) => {\r\n    const currentUserId = dataUser._id; //мой id\r\n\r\n    // Обновляем информацию о пользователе\r\n    updateProfileInfo(dataUser.name, dataUser.about, dataUser.avatar);\r\n    addCards(dataCards, currentUserId, \"append\");\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\n// Обработчик изменения данных профиля и отправки формы\r\nfunction handleEditFormSubmit(evt) {\r\n  // Функция, которая возвращает промис\r\n  function makeRequest() {\r\n    const name = nameInput.value;\r\n    const about = jobInput.value;\r\n\r\n    return renameUserData(name, about).then((userData) => {\r\n      // Обновляем DOM с новыми данными профиля\r\n      profileInfoTitle.textContent = userData.name;\r\n      profileInfoDescription.textContent = userData.about;\r\n    });\r\n  }\r\n  // Вызываем универсальную функцию handleSubmit\r\n  handleSubmit(makeRequest, evt);\r\n}\r\n\r\n//Обработчик создания новой карточки\r\nfunction handleCreateNewCardSubmit(evt) {\r\n  function makeRequest() {\r\n    // Получаем значения полей\r\n    const cardImg = popupInputNewCardImg.value;\r\n    const cardTitle = popupInputNewCardTitle.value;\r\n\r\n    return createNewCard(cardTitle, cardImg).then((newCardData) => {\r\n      // Создаем карточку с использованием данных из ответа сервера\r\n      const card = createCard({\r\n        img: newCardData.link,\r\n        title: newCardData.name,\r\n        functionDelCard: handleOpenDeletePopup,\r\n        handleLikeCard: handleLikeCard,\r\n        handlerOpenPopupZoom: handleOpenPopupZoom,\r\n        cardData: newCardData,\r\n        currentUserId: newCardData.owner._id,\r\n      });\r\n      // Добавляем карточку в контейнер\r\n      cardsContainer.prepend(card);\r\n    });\r\n  }\r\n  // Вызываем универсальную функцию\r\n  handleSubmit(makeRequest, evt);\r\n}\r\n\r\n//функция обработчик открытия попапа подтверждения удаления\r\nfunction handleOpenDeletePopup(cardElement, cardId) {\r\n  currentCardElement = { element: cardElement, id: cardId };\r\n  openPopup(popupDelCardQuestion); // Открываем попап подтверждения\r\n}\r\n\r\n//функция обработчик удаления карточки\r\nfunction handleDeleteCardSubmit(evt) {\r\n  evt.preventDefault(); // Предотвращаем стандартную отправку формы\r\n\r\n  if (currentCardElement) {\r\n    deleteCard(currentCardElement.id)\r\n      .then(() => {\r\n        currentCardElement.element.remove(); // Удаляем карточку из DOM\r\n        closePopup(popupDelCardQuestion); // Закрываем попап после успешного удаления\r\n      })\r\n      .catch((err) => {\r\n        console.error(`Ошибка при удалении карточки: ${err}`);\r\n      });\r\n  }\r\n}\r\n\r\n//функция обработчик установки/удаления лайка\r\nfunction handleLikeCard(cardElement, cardId, isLiked) {\r\n  const likeButton = cardElement.querySelector(\".card__like-button\");\r\n  const likeCounter = cardElement.querySelector(\".card__like-number\");\r\n\r\n  if (isLiked) {\r\n    delLikeCard(cardId)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.remove(\"card__like-button_is-active\");\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.error(`Ошибка при удалении лайка: ${err}`);\r\n      });\r\n  } else {\r\n    addLikeCard(cardId)\r\n      .then((updatedCard) => {\r\n        likeButton.classList.add(\"card__like-button_is-active\");\r\n        likeCounter.textContent = updatedCard.likes.length;\r\n      })\r\n      .catch((err) => {\r\n        console.error(`Ошибка при добавлении лайка: ${err}`);\r\n      });\r\n  }\r\n}\r\n\r\n//функция обработчик смены аватара\r\nfunction handleAvatarChange(evt) {\r\n  function makeRequest() {\r\n    const avatarInputValue = avatarInput.value;\r\n\r\n    // Проверяем URL перед обновлением аватара\r\n    return checkImageUrl(avatarInputValue).then((isValid) => {\r\n      if (isValid) {\r\n        return changeAvatar(avatarInputValue).then((updatedData) => {\r\n          profileAvatarImg.style.backgroundImage = `url('${updatedData.avatar}')`;\r\n        });\r\n      } else {\r\n        console.error(\"Указанный URL-адрес не является допустимым.\");\r\n      }\r\n    });\r\n  }\r\n  // Вызываем универсальную функцию handleSubmit\r\n  handleSubmit(makeRequest, evt);\r\n}\r\n\r\n//слушатель открытия попапа редактирования\r\npopupEditButtonOpen.addEventListener(\"click\", openPopupEdit);\r\n\r\n//слушатель открытия попапа смены аватара\r\nprofileAvatarImg.addEventListener(\"click\", () => openPopup(popupAvatarUpdate));\r\n\r\n//слушатель открытия попапа создания новой карточки\r\npopupNewCardButtonOpen.addEventListener(\"click\", openPopupNewCard);\r\n\r\n//слушатель создания новой карточки\r\nformCreateNC.addEventListener(\"submit\", handleCreateNewCardSubmit);\r\n\r\n// Прикрепляем обработчик к форме:\r\n// он будет следить за событием “submit” - «отправка»\r\nformElement.addEventListener(\"submit\", handleEditFormSubmit);\r\n\r\n//добавление слушателей закрытия попапа нажатием на крестик\r\naddListenersClosePopup();\r\n\r\n//вызов функции закрытия попапа нажатием на оверлей\r\naddListenersClosePopupOverlay();\r\n\r\n// Вызовем функцию включение валидации вызовом enableValidation\r\n// все настройки передаются при вызове\r\nenableValidation(validationConfig);\r\n\r\n// Слушатель на подтверждение удаления карточки\r\npopupDelCardQuestion.addEventListener(\"submit\", handleDeleteCardSubmit);\r\n\r\nupdateAvatarForm.addEventListener(\"submit\", handleAvatarChange);\r\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","createCard","_ref","img","title","functionDelCard","handleLikeCard","handlerOpenPopupZoom","cardData","currentUserId","cardElement","document","querySelector","content","cloneNode","buttonDelCard","buttonLikeCard","cardImg","cardTitle","likeCounter","src","alt","textContent","likes","length","some","like","_id","classList","add","owner","remove","addEventListener","isLiked","contains","checkResponse","res","ok","json","Promise","reject","concat","status","renderLoading","isLoading","button","buttonText","arguments","loadingText","handleSubmit","request","evt","preventDefault","popup","submitButton","submitter","initialText","then","target","reset","catch","err","console","error","finally","config","authorization","endpoint","options","url","headers","_objectSpread","fetch","validationConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","hideInputError","formElement","inputElement","errorElement","id","isValid","validity","patternMismatch","setCustomValidity","dataset","errorMessage","valid","showInputError","validationMessage","disableButton","buttonElement","disabled","toggleButtonState","inputList","hasInvalidInput","enableButton","clearValidation","inputElements","Array","from","querySelectorAll","forEach","openPopup","closePopupEsc","closePopup","removeEventListener","closePopupOverlay","event","currentTarget","key","popupList","currentCardElement","popupEditButtonOpen","popupNewCardButtonOpen","popupEdit","popupAvatarUpdate","popupDelCardQuestion","popupNewCard","popupZoom","updateAvatarForm","popupZoomImg","popupZoomTitle","popupInputNewCardTitle","popupInputNewCardImg","profileAvatarImg","profileInfoTitle","profileInfoDescription","formCreateNC","forms","newplace","nameInput","jobInput","avatarInput","cardsContainer","handleOpenPopupZoom","imageSrc","titleText","closest","handleOpenDeletePopup","cardId","element","likeButton","method","delLikeCard","updatedCard","addLikeCard","all","result","log","name","about","avatar","_ref2","dataUser","dataCards","style","backgroundImage","cardsDataArray","card","link","addCards","value","body","JSON","stringify","createNewCard","newCardData","prepend","data","userData","popupBtn","index","popupItem","setEventListeners","enableValidation","avatarInputValue","response","contentType","get","startsWith","updatedData"],"sourceRoot":""}